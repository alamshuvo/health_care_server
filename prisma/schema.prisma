generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               userRole
  needPasswordChange Boolean    @default(true)
  status             userStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  Patient            Patient?

  @@map("Users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("Admins")
}

model Doctor {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  profilePhoto        String?
  contactNumber       String
  adress              String?
  registrationNumber  String
  experience          Int                  @default(0)
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  user                User                 @relation(fields: [email], references: [email])
  doctorSpecialities  DoctorSpecialities[]

  @@map("doctors")
}

model Patient {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user              User               @relation(fields: [email], references: [email])
  patientHealthData patientHealthData?
  medicalReport     medicalReport[]

  @@map("patients")
}

model Specialties {
  id                 String               @id @default(uuid())
  title              String
  icon               String
  doctorSpecialities DoctorSpecialities[]

  @@map("specialties")
}

model DoctorSpecialities {
  specialitiesId String
  speciality     Specialties @relation(fields: [specialitiesId], references: [id])
  doctorId       String
  doctor         Doctor      @relation(fields: [doctorId], references: [id])

  @@id([specialitiesId, doctorId])
  @@map("doctor_specialities")
}

model patientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  gender              Gender
  dateOfBirth         String
  bloodGroup          BloodGroup
  hasAllergy          Boolean
  hasDiabetes         Boolean
  height              String
  weight              String
  smokingStatus       Boolean
  dietaryPreference   String
  pregnancyStatus     Boolean
  mentalHealthHistory String
  immunizationStatus  String
  hasPastSurgeries    Boolean
  recentAnxiety       Boolean
  recentDepression    Boolean
  martialStatus       martialStatus
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("patient_health_datas")
}

model medicalReport {
  id         String   @id @default(uuid())
  patientId  String
  patient    Patient  @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("medical_reports")
}

enum martialStatus {
  MARRIED
  UNMARRIED
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum Gender {
  MALE
  FEMALE
}

enum userStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum userRole {
  SUPER_ADMIN
  DOCTOR
  ADMIN
  PATIENT
}
